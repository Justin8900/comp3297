openapi: 3.0.3
info:
  title: Unihaven API
  version: 1.0.0
  description: "\nAPI for Unihaven project - a platform for university student accommodation\
    \ management.\n\n## Role-Based Access Control\n\nThis API implements role-based\
    \ access control through query parameters. For most endpoints, you must include\
    \ a `role` query parameter with one of the following formats:\n\n- `uni_code:specialist:<id>`:\
    \ For University Specialists performing actions requiring their specific ID (e.g.,\
    \ retrieving managed accommodations). The `id` is sometimes optional for general\
    \ list actions.\n- `uni_code:member:<uid>`: For University Members (students/staff,\
    \ identified by UID).\n\nWhere `uni_code` is the code for the university (e.g.,\
    \ 'hku', 'cu', 'hkust').\n\n### Required Role Parameter\n\nMost endpoints require\
    \ the `role` parameter to be included in the request. For example:\n```\nGET /accommodations/?role=hku:member:u1234567\n\
    POST /property-owners/?role=hku:specialist:1\nGET /reservations/?role=cu:specialist:1\
    \ # Requires ID for specialist\nGET /members/hku:u1234567/reservations/?role=hku:member:u1234567\
    \ # Requires matching ID\n```\n\n### Resource-Oriented Design & Actions\n\nThe\
    \ API generally follows a resource-oriented design. Specific actions often use\
    \ dedicated sub-paths or HTTP methods:\n- Creating a reservation: Use `POST /reservations/`\
    \ (logic handled in view)\n- **Updating/Canceling/Confirming a reservation**:\
    \ Use `PATCH /reservations/{id}/` with appropriate status in the body (e.g., `{\"\
    status\": \"confirmed\"}`, `{\"status\": \"cancelled\"}`). Cancellation sets `cancelled_by`\
    \ automatically.\n- Rating an accommodation: Use `POST /ratings/` (logic handled\
    \ in view)\n\n**Note on Authentication/Permissions:** Role checks are implemented\
    \ via custom permission classes and logic within the viewsets. Standard DRF authentication\
    \ (SessionAuthentication, BasicAuthentication) is assumed.\n\n### Permission Rules\
    \ Summary (Updated):\n\n1.  **Property Owners (`/property-owners/`)**: Only Specialists\
    \ (`uni_code:specialist[:id]`) can perform List, Create, Retrieve, Update, Delete.\n\
    2.  **Accommodations (`/accommodations/`)**:\n    - List/Retrieve: Any Member\
    \ (`uni_code:member:uid`) or Specialist (`uni_code:specialist[:id]`). View filters\
    \ by university.\n    - Create/Update/Delete: Only Specialists (`uni_code:specialist[:id]`)\
    \ whose university is linked to the accommodation.\n3.  **Members (`/members/`)**:\n\
    \    - List/Create/Delete: Only Specialists (`uni_code:specialist[:id]`) from\
    \ the target university.\n    - Retrieve/Update: Specialists (`uni_code:specialist[:id]`)\
    \ from the same university OR the specific Member themselves (`uni_code:member:<uid>`).\n\
    \    - List Reservations (`/members/{uid}/reservations/`): Specialists (`uni_code:specialist[:id]`)\
    \ from the same university OR the specific Member themselves (`uni_code:member:<uid>`).\n\
    4.  **Specialists (`/specialists/`)**: \n    - List/Retrieve: Only Specialists\
    \ (`uni_code:specialist[:id]`) from the same university.\n    - Create/Update/Delete:\
    \ Restricted (likely Admin/Superuser only).\n5.  **Reservations (`/reservations/`)**:\n\
    \    - List (`GET /reservations/`): Members (`uni_code:member:uid`) see their\
    \ own; Specialists (`uni_code:specialist[:id]`) see their university's.\n    -\
    \ Create (`POST /reservations/`): Members (`uni_code:member:uid`) for self; Specialists\
    \ (`uni_code:specialist[:id]`) for members in their university (requires `member_uid`\
    \ in body).\n    - Retrieve/Update (`GET/PUT/PATCH /reservations/{id}/`): Member\
    \ owner (`uni_code:member:uid`) or Specialist (`uni_code:specialist[:id]`) from\
    \ the reservation's university.\n    - **Cancel**: Use `PATCH /reservations/{id}/`\
    \ with `{\"status\": \"cancelled\"}`. Member owner can only cancel `pending` reservations.\
    \ Specialist can cancel any (non-final) reservation in their university.\n   \
    \ - **Confirm**: Use `PATCH /reservations/{id}/` with `{\"status\": \"confirmed\"\
    }` (Specialists only).\n    - Delete (`DELETE /reservations/{id}/`): Disallowed\
    \ (Returns 405 Method Not Allowed).\n6.  **Ratings (`/ratings/`)**:\n    - List\
    \ (`GET /ratings/`): Any Member or Specialist (`uni_code:member:uid` or `uni_code:specialist[:id]`)\
    \ can list all ratings within their university. Can be filtered by `accommodation_id`.\n\
    \    - Create (`POST /ratings/`): Only Members (`uni_code:member:uid`) for their\
    \ own completed reservations.\n    - Retrieve (`GET /ratings/{id}/`): Any Member\
    \ or Specialist (`uni_code:member:uid` or `uni_code:specialist[:id]`) can retrieve\
    \ any rating within their university.\n    - Delete (`DELETE /ratings/{id}/`):\
    \ Specialist from the rating's university.\n    - Update: Restricted.\n\nIf you\
    \ attempt to access an endpoint without the required role or permission, you should\
    \ receive a 403 Forbidden or 400 Bad Request error with an appropriate error message.\n\
    \n## Features\n\n- University Specialists can manage accommodations, property\
    \ owners, and handle reservations for their university.\n- University Members\
    \ can search accommodations, make reservations, and rate their stays.\n- Property\
    \ owners are managed entities in the system, not users with direct API access.\n"
paths:
  /accommodations/:
    get:
      operationId: accommodations_list
      description: List accommodations available at the user's university, with optional
        filters for type, beds, bedrooms, price, availability dates, rating, and distance
        from a university location.
      summary: List accommodations by university with filters
      parameters:
      - in: query
        name: available_from
        schema:
          type: string
        description: Available from date (YYYY-MM-DD)
      - in: query
        name: available_until
        schema:
          type: string
        description: Available until date (YYYY-MM-DD)
      - in: query
        name: bedrooms
        schema:
          type: integer
        description: Exact number of bedrooms
      - in: query
        name: beds
        schema:
          type: integer
        description: Exact number of beds
      - in: query
        name: distance_from
        schema:
          type: string
        description: Name of UniversityLocation to calculate distance from
      - in: query
        name: max_price
        schema:
          type: number
          format: double
        description: Maximum daily price
      - in: query
        name: min_bedrooms
        schema:
          type: integer
        description: Minimum number of bedrooms
      - in: query
        name: min_beds
        schema:
          type: integer
        description: Minimum number of beds
      - in: query
        name: min_rating
        schema:
          type: number
          format: double
        description: Minimum average rating
      - in: query
        name: rating
        schema:
          type: number
          format: double
        description: Exact average rating (within 0.1)
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:member:uid'' or ''uni_code:specialist[:id]'')'
        required: true
      - in: query
        name: type
        schema:
          type: string
          enum:
          - apartment
          - house
          - room
        description: Filter by accommodation type (e.g., 'apartment', 'house', 'room')
      tags:
      - accommodations
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Accommodation'
          description: ''
    post:
      operationId: accommodations_create
      description: Create a new accommodation listing. Requires a Specialist role
        from a university intended to manage the accommodation.
      summary: Create accommodation (Managing Specialists Only)
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - accommodations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccommodationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AccommodationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AccommodationRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accommodation'
          description: ''
  /accommodations/{id}/:
    get:
      operationId: accommodations_retrieve
      description: Retrieve details for a specific accommodation if available at the
        user's university.
      summary: Retrieve an accommodation
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this accommodation.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:member:uid'' or ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - accommodations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accommodation'
          description: ''
    put:
      operationId: accommodations_update
      description: Update an accommodation listing. Requires a Specialist role from
        a university managing the accommodation.
      summary: Update accommodation (Managing Specialists Only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this accommodation.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - accommodations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccommodationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AccommodationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AccommodationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accommodation'
          description: ''
    patch:
      operationId: accommodations_partial_update
      description: Partially update an accommodation listing. Requires a Specialist
        role from a university managing the accommodation.
      summary: Partially update accommodation (Managing Specialists Only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this accommodation.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - accommodations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAccommodationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAccommodationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAccommodationRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accommodation'
          description: ''
    delete:
      operationId: accommodations_destroy
      description: Delete an accommodation listing. Requires a Specialist role from
        a university managing the accommodation.
      summary: Delete accommodation (Managing Specialists Only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this accommodation.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - accommodations
      responses:
        '204':
          description: No response body
  /members/:
    get:
      operationId: members_list
      description: List all members within the specialist's university.
      summary: List members (Specialists Only)
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - members
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
          description: ''
    post:
      operationId: members_create
      description: Create a new member within the specialist's university.
      summary: Create member (Specialists Only)
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - members
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MemberRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MemberRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
  /members/{uid}/:
    get:
      operationId: members_retrieve
      description: Retrieve a member by UID. Specialists can retrieve any member within
        their university. Members can only retrieve their own details.
      summary: Retrieve a member by UID
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:member:uid'' or ''uni_code:specialist[:id]'')'
        required: true
      - in: path
        name: uid
        schema:
          type: string
        description: A unique value identifying this member.
        required: true
      tags:
      - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
    put:
      operationId: members_update
      description: Update a member by UID. Specialists can update any member within
        their university. Members can only update their own details.
      summary: Update a member by UID
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:member:uid'' or ''uni_code:specialist[:id]'')'
        required: true
      - in: path
        name: uid
        schema:
          type: string
        description: A unique value identifying this member.
        required: true
      tags:
      - members
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MemberRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MemberRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
    patch:
      operationId: members_partial_update
      description: Partially update a member by UID. Specialists can update any member
        within their university. Members can only update their own details.
      summary: Partially update a member by UID
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:member:uid'' or ''uni_code:specialist[:id]'')'
        required: true
      - in: path
        name: uid
        schema:
          type: string
        description: A unique value identifying this member.
        required: true
      tags:
      - members
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMemberRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMemberRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMemberRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
    delete:
      operationId: members_destroy
      description: Delete a member by UID within the specialist's university.
      summary: Delete member (Specialists Only)
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      - in: path
        name: uid
        schema:
          type: string
        description: A unique value identifying this member.
        required: true
      tags:
      - members
      responses:
        '204':
          description: No response body
  /members/{uid}/reservations/:
    get:
      operationId: members_reservations_list
      description: Get all reservations for a specific member (identified by UID in
        URL). Members can only view their own reservations. Specialists can view reservations
        for members within their university.
      summary: List reservations for a member
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:member:uid'' or ''uni_code:specialist[:id]'')'
        required: true
      - in: query
        name: status
        schema:
          type: string
          enum:
          - cancelled
          - completed
          - confirmed
          - pending
        description: Filter reservations by status
      - in: path
        name: uid
        schema:
          type: string
        description: A unique value identifying this member.
        required: true
      tags:
      - members
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
          description: ''
  /property-owners/:
    get:
      operationId: property_owners_list
      description: List all property owners. Requires a Specialist role.
      summary: List property owners (Specialists Only)
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - property-owners
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PropertyOwner'
          description: ''
    post:
      operationId: property_owners_create
      description: Create a new property owner. Requires a Specialist role.
      summary: Create property owner (Specialists Only)
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - property-owners
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyOwnerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PropertyOwnerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PropertyOwnerRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyOwner'
          description: ''
  /property-owners/{id}/:
    get:
      operationId: property_owners_retrieve
      description: Retrieve details of a specific property owner. Requires a Specialist
        role.
      summary: Retrieve property owner (Specialists Only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this property owner.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - property-owners
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyOwner'
          description: ''
    put:
      operationId: property_owners_update
      description: Update a property owner. Requires a Specialist role.
      summary: Update property owner (Specialists Only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this property owner.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - property-owners
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyOwnerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PropertyOwnerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PropertyOwnerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyOwner'
          description: ''
    patch:
      operationId: property_owners_partial_update
      description: Partially update a property owner. Requires a Specialist role.
      summary: Partially update property owner (Specialists Only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this property owner.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - property-owners
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPropertyOwnerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPropertyOwnerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPropertyOwnerRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyOwner'
          description: ''
    delete:
      operationId: property_owners_destroy
      description: Delete a property owner. Requires a Specialist role.
      summary: Delete property owner (Specialists Only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this property owner.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - property-owners
      responses:
        '204':
          description: No response body
  /ratings/:
    get:
      operationId: ratings_list
      description: List ratings associated with the user's university. Visible to
        all Members and Specialists of that university. Can be filtered by accommodation_id.
      summary: List ratings (Public within University)
      parameters:
      - in: query
        name: accommodation_id
        schema:
          type: integer
        description: Filter by accommodation ID
      - in: query
        name: member_id
        schema:
          type: string
        description: Filter by member UID (Specialists only)
      - in: query
        name: reservation_id
        schema:
          type: integer
        description: Filter by reservation ID
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:member:uid'' or ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - ratings
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
          description: ''
    post:
      operationId: ratings_create
      description: Rate an accommodation for a completed reservation. Only the Member
        associated with the reservation can create a rating.
      summary: Create a new rating (Members Only)
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:member:uid'')'
        required: true
      tags:
      - ratings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RatingRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RatingRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
          description: ''
  /ratings/{id}/:
    get:
      operationId: ratings_retrieve
      description: Retrieve details of a specific rating. Visible to any Member or
        Specialist from the rating's associated university.
      summary: Retrieve a rating (Public within University)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this rating.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:member:uid'' or ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - ratings
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
          description: ''
    delete:
      operationId: ratings_destroy
      description: Delete a rating. Requires Specialist role from the rating's university.
      summary: Delete rating (Specialists Only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this rating.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - ratings
      responses:
        '204':
          description: No response body
  /reservations/:
    get:
      operationId: reservations_list
      description: List reservations based on role. Members see their own. Specialists
        see all reservations within their university.
      summary: List reservations (Members see own, Specialists see their Uni's)
      parameters:
      - in: query
        name: accommodation_id
        schema:
          type: integer
        description: Filter by accommodation ID
      - in: query
        name: member_id
        schema:
          type: string
        description: Filter by member UID (Specialists only)
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:member:uid'' or ''uni_code:specialist[:id]'')'
        required: true
      - in: query
        name: status
        schema:
          type: string
          enum:
          - cancelled
          - completed
          - confirmed
          - pending
        description: Filter by status
      tags:
      - reservations
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
          description: ''
    post:
      operationId: reservations_create
      description: Create a new reservation. Members reserve for self. Specialists
        can reserve for members within their university (must provide member_id in
        request body). Defaults to 'pending' status.
      summary: Create a new reservation
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:member:uid'' or ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - reservations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          description: ''
  /reservations/{id}/:
    get:
      operationId: reservations_retrieve
      description: Retrieve details of a specific reservation. Members can retrieve
        their own. Specialists can retrieve any reservation within their university.
      summary: Retrieve a reservation
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this reservation.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:member:uid'' or ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - reservations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          description: ''
    put:
      operationId: reservations_update
      description: Update a reservation (e.g., change status). Requires Specialist
        role from the reservation's university. Use PATCH for status changes like
        confirm/complete/cancel.
      summary: Update reservation (Specialists Only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this reservation.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - reservations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          description: ''
    patch:
      operationId: reservations_partial_update
      description: 'Partially update a reservation. Members can use this to cancel
        their *pending* reservations (`{"status": "cancelled"}`). Specialists can
        use it to update status (e.g., `confirmed`, `cancelled`). Requires appropriate
        role from the reservation''s university.'
      summary: Partially update/cancel reservation (Member/Specialist)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this reservation.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:member:uid'' or ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - reservations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReservationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReservationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReservationRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          description: ''
  /specialists/:
    get:
      operationId: specialists_list
      description: List all specialists within the requesting specialist's university.
      summary: List specialists (Specialists Only)
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - specialists
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Specialist'
          description: ''
    post:
      operationId: specialists_create
      description: Create a new specialist within the requesting specialist's university.
        Requires Specialist role.
      summary: Create specialist (Specialists Only)
      parameters:
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - specialists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecialistRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SpecialistRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SpecialistRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialist'
          description: ''
  /specialists/{id}/:
    get:
      operationId: specialists_retrieve
      description: Retrieve a specialist by ID within the same university.
      summary: Retrieve specialist (Specialists Only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this specialist.
        required: true
      - in: query
        name: role
        schema:
          type: string
        description: 'User role (format: ''uni_code:specialist[:id]'')'
        required: true
      tags:
      - specialists
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialist'
          description: ''
components:
  schemas:
    Accommodation:
      type: object
      description: |-
        Serializer for the Accommodation model.
        Handles M2M relationship with University and new address fields.
        Owner association via owner_id.
      properties:
        id:
          type: integer
          readOnly: true
        type:
          enum:
          - apartment
          - house
          - villa
          - studio
          - hostel
          type: string
          description: |-
            * `apartment` - Apartment
            * `house` - House
            * `villa` - Villa
            * `studio` - Studio
            * `hostel` - Hostel
          x-spec-enum-id: 485b134c5c066a7a
        address:
          type: string
          maxLength: 255
        building_name:
          type: string
          maxLength: 255
        room_number:
          type: string
          nullable: true
          maxLength: 50
        flat_number:
          type: string
          default: ''
          maxLength: 50
        floor_number:
          type: string
          default: ''
          maxLength: 50
        latitude:
          type: number
          format: double
          readOnly: true
        longitude:
          type: number
          format: double
          readOnly: true
        geo_address:
          type: string
          readOnly: true
        available_from:
          type: string
          format: date
        available_until:
          type: string
          format: date
        beds:
          type: integer
          minimum: 0
          title: Number of beds (must be 0 or greater)
        bedrooms:
          type: integer
          minimum: 0
          title: Number of bedrooms (must be 0 or greater)
        daily_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          title: Daily price (positive amount)
        owner:
          allOf:
          - $ref: '#/components/schemas/PropertyOwner'
          readOnly: true
        available_at_universities:
          type: array
          items:
            enum:
            - HKU
            - CU
            - HKUST
            type: string
            description: |-
              * `HKU` - University of Hong Kong
              * `CU` - Chinese University of Hong Kong
              * `HKUST` - Hong Kong University of Science and Technology
            x-spec-enum-id: 6a572ca0828b1abe
            title: Universities offering this accommodation (use codes like 'HKU',
              'CU')
          title: Universities offering this accommodation (use codes like 'HKU', 'CU')
        average_rating:
          type: number
          format: double
          readOnly: true
        rating_count:
          type: integer
          readOnly: true
      required:
      - address
      - available_at_universities
      - available_from
      - available_until
      - average_rating
      - bedrooms
      - beds
      - daily_price
      - geo_address
      - id
      - latitude
      - longitude
      - owner
      - rating_count
      - type
    AccommodationRequest:
      type: object
      description: |-
        Serializer for the Accommodation model.
        Handles M2M relationship with University and new address fields.
        Owner association via owner_id.
      properties:
        type:
          enum:
          - apartment
          - house
          - villa
          - studio
          - hostel
          type: string
          description: |-
            * `apartment` - Apartment
            * `house` - House
            * `villa` - Villa
            * `studio` - Studio
            * `hostel` - Hostel
          x-spec-enum-id: 485b134c5c066a7a
        address:
          type: string
          minLength: 1
          maxLength: 255
        building_name:
          type: string
          maxLength: 255
        room_number:
          type: string
          nullable: true
          maxLength: 50
        flat_number:
          type: string
          minLength: 1
          default: ''
          maxLength: 50
        floor_number:
          type: string
          minLength: 1
          default: ''
          maxLength: 50
        available_from:
          type: string
          format: date
        available_until:
          type: string
          format: date
        beds:
          type: integer
          minimum: 0
          title: Number of beds (must be 0 or greater)
        bedrooms:
          type: integer
          minimum: 0
          title: Number of bedrooms (must be 0 or greater)
        daily_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          title: Daily price (positive amount)
        owner_id:
          type: integer
          writeOnly: true
          title: Existing Property Owner ID
        available_at_universities:
          type: array
          items:
            enum:
            - HKU
            - CU
            - HKUST
            type: string
            description: |-
              * `HKU` - University of Hong Kong
              * `CU` - Chinese University of Hong Kong
              * `HKUST` - Hong Kong University of Science and Technology
            x-spec-enum-id: 6a572ca0828b1abe
            title: Universities offering this accommodation (use codes like 'HKU',
              'CU')
          title: Universities offering this accommodation (use codes like 'HKU', 'CU')
      required:
      - address
      - available_at_universities
      - available_from
      - available_until
      - bedrooms
      - beds
      - daily_price
      - owner_id
      - type
    Member:
      type: object
      description: Serializer for the concrete Member model.
      properties:
        uid:
          type: string
          maxLength: 255
        name:
          type: string
          maxLength: 255
        university:
          enum:
          - HKU
          - CU
          - HKUST
          type: string
          description: |-
            * `HKU` - University of Hong Kong
            * `CU` - Chinese University of Hong Kong
            * `HKUST` - Hong Kong University of Science and Technology
          x-spec-enum-id: 6a572ca0828b1abe
          readOnly: true
        phone_number:
          type: string
          nullable: true
          maxLength: 20
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
      required:
      - name
      - uid
      - university
    MemberRequest:
      type: object
      description: Serializer for the concrete Member model.
      properties:
        uid:
          type: string
          minLength: 1
          maxLength: 255
        name:
          type: string
          minLength: 1
          maxLength: 255
        phone_number:
          type: string
          nullable: true
          maxLength: 20
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
      required:
      - name
      - uid
    PatchedAccommodationRequest:
      type: object
      description: |-
        Serializer for the Accommodation model.
        Handles M2M relationship with University and new address fields.
        Owner association via owner_id.
      properties:
        type:
          enum:
          - apartment
          - house
          - villa
          - studio
          - hostel
          type: string
          description: |-
            * `apartment` - Apartment
            * `house` - House
            * `villa` - Villa
            * `studio` - Studio
            * `hostel` - Hostel
          x-spec-enum-id: 485b134c5c066a7a
        address:
          type: string
          minLength: 1
          maxLength: 255
        building_name:
          type: string
          maxLength: 255
        room_number:
          type: string
          nullable: true
          maxLength: 50
        flat_number:
          type: string
          minLength: 1
          default: ''
          maxLength: 50
        floor_number:
          type: string
          minLength: 1
          default: ''
          maxLength: 50
        available_from:
          type: string
          format: date
        available_until:
          type: string
          format: date
        beds:
          type: integer
          minimum: 0
          title: Number of beds (must be 0 or greater)
        bedrooms:
          type: integer
          minimum: 0
          title: Number of bedrooms (must be 0 or greater)
        daily_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          title: Daily price (positive amount)
        owner_id:
          type: integer
          writeOnly: true
          title: Existing Property Owner ID
        available_at_universities:
          type: array
          items:
            enum:
            - HKU
            - CU
            - HKUST
            type: string
            description: |-
              * `HKU` - University of Hong Kong
              * `CU` - Chinese University of Hong Kong
              * `HKUST` - Hong Kong University of Science and Technology
            x-spec-enum-id: 6a572ca0828b1abe
            title: Universities offering this accommodation (use codes like 'HKU',
              'CU')
          title: Universities offering this accommodation (use codes like 'HKU', 'CU')
    PatchedMemberRequest:
      type: object
      description: Serializer for the concrete Member model.
      properties:
        uid:
          type: string
          minLength: 1
          maxLength: 255
        name:
          type: string
          minLength: 1
          maxLength: 255
        phone_number:
          type: string
          nullable: true
          maxLength: 20
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
    PatchedPropertyOwnerRequest:
      type: object
      description: Serializer for the PropertyOwner model.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        phone_no:
          type: string
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
    PatchedReservationRequest:
      type: object
      description: |-
        Serializer for the Reservation model.
        Handles creation by members (self) or specialists (for a member).
        Handles display of reservations.
      properties:
        status:
          enum:
          - pending
          - confirmed
          - cancelled
          - completed
          type: string
          description: |-
            * `pending` - Pending
            * `confirmed` - Confirmed
            * `cancelled` - Cancelled
            * `completed` - Completed
          x-spec-enum-id: ef0e3523b506c807
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        cancelled_by:
          type: string
          nullable: true
          maxLength: 50
        accommodation:
          type: integer
          writeOnly: true
        member_uid:
          type: string
          writeOnly: true
          minLength: 1
          title: Member UID (Required if Specialist is creating reservation)
    PropertyOwner:
      type: object
      description: Serializer for the PropertyOwner model.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        phone_no:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
      required:
      - id
      - name
      - phone_no
    PropertyOwnerRequest:
      type: object
      description: Serializer for the PropertyOwner model.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        phone_no:
          type: string
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
      required:
      - name
      - phone_no
    Rating:
      type: object
      description: |-
        Serializer for the Rating model.
        Handles creation and display of ratings, linked to a reservation.
      properties:
        id:
          type: integer
          readOnly: true
        score:
          type: integer
          maximum: 5
          minimum: 0
        comment:
          type: string
          nullable: true
        date_rated:
          type: string
          format: date
          readOnly: true
        member_uid:
          type: string
          readOnly: true
        accommodation_id:
          type: integer
          readOnly: true
        accommodation_details:
          type: string
          readOnly: true
      required:
      - accommodation_details
      - accommodation_id
      - date_rated
      - id
      - member_uid
      - score
    RatingRequest:
      type: object
      description: |-
        Serializer for the Rating model.
        Handles creation and display of ratings, linked to a reservation.
      properties:
        reservation:
          type: integer
          writeOnly: true
          title: Reservation ID being rated
        score:
          type: integer
          maximum: 5
          minimum: 0
        comment:
          type: string
          nullable: true
      required:
      - reservation
      - score
    Reservation:
      type: object
      description: |-
        Serializer for the Reservation model.
        Handles creation by members (self) or specialists (for a member).
        Handles display of reservations.
      properties:
        id:
          type: integer
          readOnly: true
        status:
          enum:
          - pending
          - confirmed
          - cancelled
          - completed
          type: string
          description: |-
            * `pending` - Pending
            * `confirmed` - Confirmed
            * `cancelled` - Cancelled
            * `completed` - Completed
          x-spec-enum-id: ef0e3523b506c807
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        cancelled_by:
          type: string
          nullable: true
          maxLength: 50
        university:
          enum:
          - HKU
          - CU
          - HKUST
          type: string
          description: |-
            * `HKU` - University of Hong Kong
            * `CU` - Chinese University of Hong Kong
            * `HKUST` - Hong Kong University of Science and Technology
          x-spec-enum-id: 6a572ca0828b1abe
          readOnly: true
        member:
          allOf:
          - $ref: '#/components/schemas/Member'
          readOnly: true
        accommodation_details:
          type: string
          readOnly: true
        rating:
          allOf:
          - $ref: '#/components/schemas/Rating'
          readOnly: true
      required:
      - accommodation_details
      - end_date
      - id
      - member
      - rating
      - start_date
      - university
    ReservationRequest:
      type: object
      description: |-
        Serializer for the Reservation model.
        Handles creation by members (self) or specialists (for a member).
        Handles display of reservations.
      properties:
        status:
          enum:
          - pending
          - confirmed
          - cancelled
          - completed
          type: string
          description: |-
            * `pending` - Pending
            * `confirmed` - Confirmed
            * `cancelled` - Cancelled
            * `completed` - Completed
          x-spec-enum-id: ef0e3523b506c807
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        cancelled_by:
          type: string
          nullable: true
          maxLength: 50
        accommodation:
          type: integer
          writeOnly: true
        member_uid:
          type: string
          writeOnly: true
          minLength: 1
          title: Member UID (Required if Specialist is creating reservation)
      required:
      - accommodation
      - end_date
      - start_date
    Specialist:
      type: object
      description: Serializer for the unified Specialist model.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        university:
          enum:
          - HKU
          - CU
          - HKUST
          type: string
          description: |-
            * `HKU` - University of Hong Kong
            * `CU` - Chinese University of Hong Kong
            * `HKUST` - Hong Kong University of Science and Technology
          x-spec-enum-id: 6a572ca0828b1abe
          readOnly: true
      required:
      - id
      - name
      - university
    SpecialistRequest:
      type: object
      description: Serializer for the unified Specialist model.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
      required:
      - name
tags:
- name: accommodations
  description: Operations related to student accommodations
- name: specialists
  description: Operations related to University Specialists
- name: members
  description: Operations related to University Members
- name: property-owners
  description: Operations related to managing property owners
- name: ratings
  description: Operations for managing ratings associated with accommodations
- name: reservations
  description: Operations for managing reservations
